"use strict";

var _express = _interopRequireDefault(require("express"));
var _cors = _interopRequireDefault(require("cors"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _morgan = _interopRequireDefault(require("morgan"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _detectPort = _interopRequireDefault(require("detect-port"));
var _chalk = _interopRequireDefault(require("chalk"));
var _auth = _interopRequireDefault(require("./api/auth.js"));
var _posts = _interopRequireDefault(require("./api/posts.js"));
var _apiDoc = _interopRequireDefault(require("./utils/api-doc.js"));
var _auth2 = require("./utils/auth.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// libs

// api

// utils

// mongo db
const db = _mongoose.default.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
_mongoose.default.connect('mongodb+srv://test:1q2w3e4r@project.k7oeb.mongodb.net/?retryWrites=true&w=majority&appName=Project', {
  connectTimeoutMS: 30000,
  // 30초로 설정
  serverSelectionTimeoutMS: 30000,
  // 30초로 설정,
  useNewUrlParser: true,
  useUnifiedTopology: true
});
_mongoose.default.Promise = global.Promise;

// server setup
let port;
async function configServer() {
  port = 3000 || (await (0, _detectPort.default)(3000));
}
configServer();

// express setup
const app = (0, _express.default)();
app.use((0, _cors.default)());
app.use(_bodyParser.default.urlencoded({
  extended: true
}));
app.use(_bodyParser.default.json());
app.use((0, _morgan.default)('dev')); // log request

// express routers
app.use('/', _auth.default);
app.use('/posts', _auth2.authenticateUser, _posts.default);

// api docs
app.use('/api', _apiDoc.default);

// start
app.listen(port, () => console.log(`${_chalk.default.white.bgHex('#41b883').bold(`VUE TIL SERVER IS RUNNING ON ${port}`)}`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvcnMiLCJfYm9keVBhcnNlciIsIl9tb3JnYW4iLCJfbW9uZ29vc2UiLCJfZGV0ZWN0UG9ydCIsIl9jaGFsayIsIl9hdXRoIiwiX3Bvc3RzIiwiX2FwaURvYyIsIl9hdXRoMiIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRiIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJiaW5kIiwiY29ubmVjdCIsImNvbm5lY3RUaW1lb3V0TVMiLCJzZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVMiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJQcm9taXNlIiwiZ2xvYmFsIiwicG9ydCIsImNvbmZpZ1NlcnZlciIsImRldGVjdFBvcnQiLCJhcHAiLCJleHByZXNzIiwidXNlIiwiY29ycyIsImJvZHlQYXJzZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwibW9yZ2FuIiwiYXV0aCIsImF1dGhlbnRpY2F0ZVVzZXIiLCJwb3N0cyIsImRvY3MiLCJsaXN0ZW4iLCJsb2ciLCJjaGFsayIsIndoaXRlIiwiYmdIZXgiLCJib2xkIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWJzXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IG1vcmdhbiBmcm9tICdtb3JnYW4nO1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCBkZXRlY3RQb3J0IGZyb20gJ2RldGVjdC1wb3J0JztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5cbi8vIGFwaVxuaW1wb3J0IGF1dGggZnJvbSAnLi9hcGkvYXV0aC5qcyc7XG5pbXBvcnQgcG9zdHMgZnJvbSAnLi9hcGkvcG9zdHMuanMnO1xuaW1wb3J0IGRvY3MgZnJvbSAnLi91dGlscy9hcGktZG9jLmpzJztcblxuLy8gdXRpbHNcbmltcG9ydCB7IGF1dGhlbnRpY2F0ZVVzZXIgfSBmcm9tICcuL3V0aWxzL2F1dGguanMnO1xuXG4vLyBtb25nbyBkYlxuY29uc3QgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xuZGIub24oJ2Vycm9yJywgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICdNb25nb0RCIGNvbm5lY3Rpb24gZXJyb3I6JykpO1xubW9uZ29vc2UuY29ubmVjdChcbiAgJ21vbmdvZGIrc3J2Oi8vdGVzdDoxcTJ3M2U0ckBwcm9qZWN0Lms3b2ViLm1vbmdvZGIubmV0Lz9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHkmYXBwTmFtZT1Qcm9qZWN0JyxcbiAge1xuICAgIGNvbm5lY3RUaW1lb3V0TVM6IDMwMDAwLCAvLyAzMOy0iOuhnCDshKTsoJVcbiAgICBzZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVM6IDMwMDAwLCAvLyAzMOy0iOuhnCDshKTsoJUsXG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcbiAgfSxcbik7XG5tb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cbi8vIHNlcnZlciBzZXR1cFxubGV0IHBvcnQ7XG5hc3luYyBmdW5jdGlvbiBjb25maWdTZXJ2ZXIoKSB7XG4gIHBvcnQgPSAzMDAwIHx8IChhd2FpdCBkZXRlY3RQb3J0KDMwMDApKTtcbn1cbmNvbmZpZ1NlcnZlcigpO1xuXG4vLyBleHByZXNzIHNldHVwXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShtb3JnYW4oJ2RldicpKTsgLy8gbG9nIHJlcXVlc3RcblxuLy8gZXhwcmVzcyByb3V0ZXJzXG5hcHAudXNlKCcvJywgYXV0aCk7XG5hcHAudXNlKCcvcG9zdHMnLCBhdXRoZW50aWNhdGVVc2VyLCBwb3N0cyk7XG5cbi8vIGFwaSBkb2NzXG5hcHAudXNlKCcvYXBpJywgZG9jcyk7XG5cbi8vIHN0YXJ0XG5hcHAubGlzdGVuKHBvcnQsICgpID0+XG4gIGNvbnNvbGUubG9nKFxuICAgIGAke2NoYWxrLndoaXRlXG4gICAgICAuYmdIZXgoJyM0MWI4ODMnKVxuICAgICAgLmJvbGQoYFZVRSBUSUwgU0VSVkVSIElTIFJVTk5JTkcgT04gJHtwb3J0fWApfWAsXG4gICksXG4pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFdBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFPLEtBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFRLE1BQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFTLE9BQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFVLE1BQUEsR0FBQVYsT0FBQTtBQUFtRCxTQUFBRCx1QkFBQVksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQWZuRDs7QUFTQTs7QUFLQTs7QUFHQTtBQUNBLE1BQU1HLEVBQUUsR0FBR0MsaUJBQVEsQ0FBQ0MsVUFBVTtBQUM5QkYsRUFBRSxDQUFDRyxFQUFFLENBQUMsT0FBTyxFQUFFQyxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDRixPQUFPLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztBQUN4RUgsaUJBQVEsQ0FBQ00sT0FBTyxDQUNkLG9HQUFvRyxFQUNwRztFQUNFQyxnQkFBZ0IsRUFBRSxLQUFLO0VBQUU7RUFDekJDLHdCQUF3QixFQUFFLEtBQUs7RUFBRTtFQUNqQ0MsZUFBZSxFQUFFLElBQUk7RUFDckJDLGtCQUFrQixFQUFFO0FBQ3RCLENBQ0YsQ0FBQztBQUNEVixpQkFBUSxDQUFDVyxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0QsT0FBTzs7QUFFakM7QUFDQSxJQUFJRSxJQUFJO0FBQ1IsZUFBZUMsWUFBWUEsQ0FBQSxFQUFHO0VBQzVCRCxJQUFJLEdBQUcsSUFBSSxLQUFLLE1BQU0sSUFBQUUsbUJBQVUsRUFBQyxJQUFJLENBQUMsQ0FBQztBQUN6QztBQUNBRCxZQUFZLENBQUMsQ0FBQzs7QUFFZDtBQUNBLE1BQU1FLEdBQUcsR0FBRyxJQUFBQyxnQkFBTyxFQUFDLENBQUM7QUFDckJELEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLElBQUFDLGFBQUksRUFBQyxDQUFDLENBQUM7QUFDZkgsR0FBRyxDQUFDRSxHQUFHLENBQUNFLG1CQUFVLENBQUNDLFVBQVUsQ0FBQztFQUFFQyxRQUFRLEVBQUU7QUFBSyxDQUFDLENBQUMsQ0FBQztBQUNsRE4sR0FBRyxDQUFDRSxHQUFHLENBQUNFLG1CQUFVLENBQUNHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUJQLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLElBQUFNLGVBQU0sRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRXhCO0FBQ0FSLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLEdBQUcsRUFBRU8sYUFBSSxDQUFDO0FBQ2xCVCxHQUFHLENBQUNFLEdBQUcsQ0FBQyxRQUFRLEVBQUVRLHVCQUFnQixFQUFFQyxjQUFLLENBQUM7O0FBRTFDO0FBQ0FYLEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLE1BQU0sRUFBRVUsZUFBSSxDQUFDOztBQUVyQjtBQUNBWixHQUFHLENBQUNhLE1BQU0sQ0FBQ2hCLElBQUksRUFBRSxNQUNmVixPQUFPLENBQUMyQixHQUFHLENBQ1QsR0FBR0MsY0FBSyxDQUFDQyxLQUFLLENBQ1hDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FDaEJDLElBQUksQ0FBQyxnQ0FBZ0NyQixJQUFJLEVBQUUsQ0FBQyxFQUNqRCxDQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=