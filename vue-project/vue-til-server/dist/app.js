"use strict";

var _express = _interopRequireDefault(require("express"));
var _cors = _interopRequireDefault(require("cors"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _morgan = _interopRequireDefault(require("morgan"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _detectPort = _interopRequireDefault(require("detect-port"));
var _chalk = _interopRequireDefault(require("chalk"));
var _auth = _interopRequireDefault(require("./api/auth.js"));
var _posts = _interopRequireDefault(require("./api/posts.js"));
var _apiDoc = _interopRequireDefault(require("./utils/api-doc.js"));
var _auth2 = require("./utils/auth.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// libs

// api

// utils

// mongo db
const db = _mongoose.default.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
_mongoose.default.connect('mongodb+srv://test:1234@myproject.k7oeb.mongodb.net/?retryWrites=true&w=majority&appName=MyProject', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});
_mongoose.default.Promise = global.Promise;

// server setup
let port;
async function configServer() {
  port = 3000 || (await (0, _detectPort.default)(3000));
}
configServer();

// express setup
const app = (0, _express.default)();
app.use((0, _cors.default)());
app.use(_bodyParser.default.urlencoded({
  extended: true
}));
app.use(_bodyParser.default.json());
app.use((0, _morgan.default)('dev')); // log request

// express routers
app.use('/', _auth.default);
app.use('/posts', _auth2.authenticateUser, _posts.default);

// api docs
app.use('/api', _apiDoc.default);

// start
app.listen(port, () => console.log(`${_chalk.default.white.bgHex('#41b883').bold(`VUE TIL SERVER IS RUNNING ON ${port}`)}`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvcnMiLCJfYm9keVBhcnNlciIsIl9tb3JnYW4iLCJfbW9uZ29vc2UiLCJfZGV0ZWN0UG9ydCIsIl9jaGFsayIsIl9hdXRoIiwiX3Bvc3RzIiwiX2FwaURvYyIsIl9hdXRoMiIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRiIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJiaW5kIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsIlByb21pc2UiLCJnbG9iYWwiLCJwb3J0IiwiY29uZmlnU2VydmVyIiwiZGV0ZWN0UG9ydCIsImFwcCIsImV4cHJlc3MiLCJ1c2UiLCJjb3JzIiwiYm9keVBhcnNlciIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImpzb24iLCJtb3JnYW4iLCJhdXRoIiwiYXV0aGVudGljYXRlVXNlciIsInBvc3RzIiwiZG9jcyIsImxpc3RlbiIsImxvZyIsImNoYWxrIiwid2hpdGUiLCJiZ0hleCIsImJvbGQiXSwic291cmNlcyI6WyIuLi9zcmMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYnNcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgbW9yZ2FuIGZyb20gJ21vcmdhbic7XG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IGRldGVjdFBvcnQgZnJvbSAnZGV0ZWN0LXBvcnQnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcblxuLy8gYXBpXG5pbXBvcnQgYXV0aCBmcm9tICcuL2FwaS9hdXRoLmpzJztcbmltcG9ydCBwb3N0cyBmcm9tICcuL2FwaS9wb3N0cy5qcyc7XG5pbXBvcnQgZG9jcyBmcm9tICcuL3V0aWxzL2FwaS1kb2MuanMnO1xuXG4vLyB1dGlsc1xuaW1wb3J0IHsgYXV0aGVudGljYXRlVXNlciB9IGZyb20gJy4vdXRpbHMvYXV0aC5qcyc7XG5cbi8vIG1vbmdvIGRiXG5jb25zdCBkYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG5kYi5vbignZXJyb3InLCBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSwgJ01vbmdvREIgY29ubmVjdGlvbiBlcnJvcjonKSk7XG5tb25nb29zZS5jb25uZWN0KFxuICAnbW9uZ29kYitzcnY6Ly90ZXN0OjEyMzRAbXlwcm9qZWN0Lms3b2ViLm1vbmdvZGIubmV0Lz9yZXRyeVdyaXRlcz10cnVlJnc9bWFqb3JpdHkmYXBwTmFtZT1NeVByb2plY3QnLFxuICB7XG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcbiAgfSxcbik7XG5tb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cbi8vIHNlcnZlciBzZXR1cFxubGV0IHBvcnQ7XG5hc3luYyBmdW5jdGlvbiBjb25maWdTZXJ2ZXIoKSB7XG4gIHBvcnQgPSAzMDAwIHx8IChhd2FpdCBkZXRlY3RQb3J0KDMwMDApKTtcbn1cbmNvbmZpZ1NlcnZlcigpO1xuXG4vLyBleHByZXNzIHNldHVwXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShtb3JnYW4oJ2RldicpKTsgLy8gbG9nIHJlcXVlc3RcblxuLy8gZXhwcmVzcyByb3V0ZXJzXG5hcHAudXNlKCcvJywgYXV0aCk7XG5hcHAudXNlKCcvcG9zdHMnLCBhdXRoZW50aWNhdGVVc2VyLCBwb3N0cyk7XG5cbi8vIGFwaSBkb2NzXG5hcHAudXNlKCcvYXBpJywgZG9jcyk7XG5cbi8vIHN0YXJ0XG5hcHAubGlzdGVuKHBvcnQsICgpID0+XG4gIGNvbnNvbGUubG9nKFxuICAgIGAke2NoYWxrLndoaXRlXG4gICAgICAuYmdIZXgoJyM0MWI4ODMnKVxuICAgICAgLmJvbGQoYFZVRSBUSUwgU0VSVkVSIElTIFJVTk5JTkcgT04gJHtwb3J0fWApfWAsXG4gICksXG4pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFdBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFPLEtBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFRLE1BQUEsR0FBQVQsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFTLE9BQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFVLE1BQUEsR0FBQVYsT0FBQTtBQUFtRCxTQUFBRCx1QkFBQVksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQWZuRDs7QUFTQTs7QUFLQTs7QUFHQTtBQUNBLE1BQU1HLEVBQUUsR0FBR0MsaUJBQVEsQ0FBQ0MsVUFBVTtBQUM5QkYsRUFBRSxDQUFDRyxFQUFFLENBQUMsT0FBTyxFQUFFQyxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDRixPQUFPLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztBQUN4RUgsaUJBQVEsQ0FBQ00sT0FBTyxDQUNkLG9HQUFvRyxFQUNwRztFQUNFQyxlQUFlLEVBQUUsSUFBSTtFQUNyQkMsa0JBQWtCLEVBQUU7QUFDdEIsQ0FDRixDQUFDO0FBQ0RSLGlCQUFRLENBQUNTLE9BQU8sR0FBR0MsTUFBTSxDQUFDRCxPQUFPOztBQUVqQztBQUNBLElBQUlFLElBQUk7QUFDUixlQUFlQyxZQUFZQSxDQUFBLEVBQUc7RUFDNUJELElBQUksR0FBRyxJQUFJLEtBQUssTUFBTSxJQUFBRSxtQkFBVSxFQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDO0FBQ0FELFlBQVksQ0FBQyxDQUFDOztBQUVkO0FBQ0EsTUFBTUUsR0FBRyxHQUFHLElBQUFDLGdCQUFPLEVBQUMsQ0FBQztBQUNyQkQsR0FBRyxDQUFDRSxHQUFHLENBQUMsSUFBQUMsYUFBSSxFQUFDLENBQUMsQ0FBQztBQUNmSCxHQUFHLENBQUNFLEdBQUcsQ0FBQ0UsbUJBQVUsQ0FBQ0MsVUFBVSxDQUFDO0VBQUVDLFFBQVEsRUFBRTtBQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xETixHQUFHLENBQUNFLEdBQUcsQ0FBQ0UsbUJBQVUsQ0FBQ0csSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMxQlAsR0FBRyxDQUFDRSxHQUFHLENBQUMsSUFBQU0sZUFBTSxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFeEI7QUFDQVIsR0FBRyxDQUFDRSxHQUFHLENBQUMsR0FBRyxFQUFFTyxhQUFJLENBQUM7QUFDbEJULEdBQUcsQ0FBQ0UsR0FBRyxDQUFDLFFBQVEsRUFBRVEsdUJBQWdCLEVBQUVDLGNBQUssQ0FBQzs7QUFFMUM7QUFDQVgsR0FBRyxDQUFDRSxHQUFHLENBQUMsTUFBTSxFQUFFVSxlQUFJLENBQUM7O0FBRXJCO0FBQ0FaLEdBQUcsQ0FBQ2EsTUFBTSxDQUFDaEIsSUFBSSxFQUFFLE1BQ2ZSLE9BQU8sQ0FBQ3lCLEdBQUcsQ0FDVCxHQUFHQyxjQUFLLENBQUNDLEtBQUssQ0FDWEMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUNoQkMsSUFBSSxDQUFDLGdDQUFnQ3JCLElBQUksRUFBRSxDQUFDLEVBQ2pELENBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==