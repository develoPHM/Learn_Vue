"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _bcrypt = _interopRequireDefault(require("bcrypt"));
var _express = require("express");
var _auth = require("../utils/auth.js");
var _UserModel = _interopRequireDefault(require("../models/UserModel.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// libs

// modules
// import passport from '../passport.js';

// router init
const router = (0, _express.Router)();

// router
router.post('/login', (req, res) => {
  // find the user
  _UserModel.default.findOne({
    username: req.body.username
  }).then(user => {
    // non registered user
    if (!user) {
      res.status(401).send('Authentication failed. User not found.');
    }
    _bcrypt.default.compare(req.body.password, user.password, (error, result) => {
      if (error) {
        res.status(500).send('Internal Server Error');
      }
      if (result) {
        // create token with user info
        const token = (0, _auth.newToken)(user);

        // current logged-in user
        const loggedInUser = {
          username: user.username,
          nickname: user.nickname
        };

        // return the information including token as JSON
        res.status(200).json({
          success: true,
          user: loggedInUser,
          message: 'Login Success',
          token: token
        });
      } else {
        res.status(401).json('Authentication failed. Wrong password.');
      }
    });
  }).catch(error => {
    res.status(500).json('Internal Server Error');
    throw error;
  });
});
router.post('/signup', (req, res) => {
  const {
    username,
    password,
    nickname
  } = req.body;
  // encrypt password
  // NOTE: 10 is saltround which is a cost factor
  _bcrypt.default.hash(password, 10, (error, hashedPassword) => {
    if (error) {
      console.log(error);
      return res.status(500).json({
        error
      });
    } else {
      const newUser = new _UserModel.default({
        username,
        password: hashedPassword,
        nickname
      });
      newUser.save((error, saved) => {
        if (error) {
          console.log(error);
          res.status(409).send(error);
        } else {
          console.log(saved);
          res.send(saved);
        }
      });
    }
  });
});

// TODO: Logout 구현 필요
var _default = exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmNyeXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZXhwcmVzcyIsIl9hdXRoIiwiX1VzZXJNb2RlbCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInJvdXRlciIsIlJvdXRlciIsInBvc3QiLCJyZXEiLCJyZXMiLCJVc2VyTW9kZWwiLCJmaW5kT25lIiwidXNlcm5hbWUiLCJib2R5IiwidGhlbiIsInVzZXIiLCJzdGF0dXMiLCJzZW5kIiwiYmNyeXB0IiwiY29tcGFyZSIsInBhc3N3b3JkIiwiZXJyb3IiLCJyZXN1bHQiLCJ0b2tlbiIsIm5ld1Rva2VuIiwibG9nZ2VkSW5Vc2VyIiwibmlja25hbWUiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJjYXRjaCIsImhhc2giLCJoYXNoZWRQYXNzd29yZCIsImNvbnNvbGUiLCJsb2ciLCJuZXdVc2VyIiwic2F2ZSIsInNhdmVkIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9hdXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYnNcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuXG4vLyBtb2R1bGVzXG4vLyBpbXBvcnQgcGFzc3BvcnQgZnJvbSAnLi4vcGFzc3BvcnQuanMnO1xuaW1wb3J0IHsgbmV3VG9rZW4gfSBmcm9tICcuLi91dGlscy9hdXRoLmpzJztcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1VzZXJNb2RlbC5qcyc7XG5cbi8vIHJvdXRlciBpbml0XG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuLy8gcm91dGVyXG5yb3V0ZXIucG9zdCgnL2xvZ2luJywgKHJlcSwgcmVzKSA9PiB7XG4gIC8vIGZpbmQgdGhlIHVzZXJcbiAgVXNlck1vZGVsLmZpbmRPbmUoe1xuICAgIHVzZXJuYW1lOiByZXEuYm9keS51c2VybmFtZSxcbiAgfSlcbiAgICAudGhlbih1c2VyID0+IHtcbiAgICAgIC8vIG5vbiByZWdpc3RlcmVkIHVzZXJcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXMuc3RhdHVzKDQwMSkuc2VuZCgnQXV0aGVudGljYXRpb24gZmFpbGVkLiBVc2VyIG5vdCBmb3VuZC4nKTtcbiAgICAgIH1cbiAgICAgIGJjcnlwdC5jb21wYXJlKHJlcS5ib2R5LnBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCgnSW50ZXJuYWwgU2VydmVyIEVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIC8vIGNyZWF0ZSB0b2tlbiB3aXRoIHVzZXIgaW5mb1xuICAgICAgICAgIGNvbnN0IHRva2VuID0gbmV3VG9rZW4odXNlcik7XG5cbiAgICAgICAgICAvLyBjdXJyZW50IGxvZ2dlZC1pbiB1c2VyXG4gICAgICAgICAgY29uc3QgbG9nZ2VkSW5Vc2VyID0ge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICBuaWNrbmFtZTogdXNlci5uaWNrbmFtZSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgdG9rZW4gYXMgSlNPTlxuICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICB1c2VyOiBsb2dnZWRJblVzZXIsXG4gICAgICAgICAgICBtZXNzYWdlOiAnTG9naW4gU3VjY2VzcycsXG4gICAgICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oJ0F1dGhlbnRpY2F0aW9uIGZhaWxlZC4gV3JvbmcgcGFzc3dvcmQuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKCdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xufSk7XG5cbnJvdXRlci5wb3N0KCcvc2lnbnVwJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBuaWNrbmFtZSB9ID0gcmVxLmJvZHk7XG4gIC8vIGVuY3J5cHQgcGFzc3dvcmRcbiAgLy8gTk9URTogMTAgaXMgc2FsdHJvdW5kIHdoaWNoIGlzIGEgY29zdCBmYWN0b3JcbiAgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwLCAoZXJyb3IsIGhhc2hlZFBhc3N3b3JkKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdVc2VyID0gbmV3IFVzZXJNb2RlbCh7XG4gICAgICAgIHVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgIG5pY2tuYW1lLFxuICAgICAgfSk7XG4gICAgICBuZXdVc2VyLnNhdmUoKGVycm9yLCBzYXZlZCkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgcmVzLnN0YXR1cyg0MDkpLnNlbmQoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHNhdmVkKTtcbiAgICAgICAgICByZXMuc2VuZChzYXZlZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59KTtcblxuLy8g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