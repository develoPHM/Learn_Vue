"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyToken = exports.newToken = exports.authenticateUser = void 0;
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _config = require("../config");
var _UserModel = _interopRequireDefault(require("../models/UserModel.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// json related

// modules

const newToken = user => {
  const payload = {
    username: user.username,
    _id: user._id
  };
  return _jsonwebtoken.default.sign(payload, _config.SECRET_KEY, {
    expiresIn: _config.EXPIRATION_DATE
  });
};
exports.newToken = newToken;
const verifyToken = token => new Promise((resolve, reject) => {
  _jsonwebtoken.default.verify(token, _config.SECRET_KEY, (err, payload) => {
    if (err) return reject(err);
    resolve(payload);
  });
});

// middleware
exports.verifyToken = verifyToken;
const authenticateUser = async (req, res, next) => {
  if (!req.headers.authorization) {
    return res.status(401).json({
      message: 'token must be included'
    });
  }
  const token = req.headers.authorization;
  let payload;
  try {
    payload = await verifyToken(token);
  } catch (e) {
    return res.status(401).json({
      message: 'token is invalid'
    });
  }
  const user = await _UserModel.default.findById(payload._id).select('-password').lean().exec();
  if (!user) {
    return res.status(401).json({
      message: 'user is not found'
    });
  }
  req.user = user;
  next();
};
exports.authenticateUser = authenticateUser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbndlYnRva2VuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uZmlnIiwiX1VzZXJNb2RlbCIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm5ld1Rva2VuIiwidXNlciIsInBheWxvYWQiLCJ1c2VybmFtZSIsIl9pZCIsImp3dCIsInNpZ24iLCJTRUNSRVRfS0VZIiwiZXhwaXJlc0luIiwiRVhQSVJBVElPTl9EQVRFIiwiZXhwb3J0cyIsInZlcmlmeVRva2VuIiwidG9rZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInZlcmlmeSIsImVyciIsImF1dGhlbnRpY2F0ZVVzZXIiLCJyZXEiLCJyZXMiLCJuZXh0IiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsIlVzZXJNb2RlbCIsImZpbmRCeUlkIiwic2VsZWN0IiwibGVhbiIsImV4ZWMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqc29uIHJlbGF0ZWRcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCB7IFNFQ1JFVF9LRVksIEVYUElSQVRJT05fREFURSB9IGZyb20gJy4uL2NvbmZpZyc7XG4vLyBtb2R1bGVzXG5pbXBvcnQgVXNlck1vZGVsIGZyb20gJy4uL21vZGVscy9Vc2VyTW9kZWwuanMnO1xuXG5leHBvcnQgY29uc3QgbmV3VG9rZW4gPSB1c2VyID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICB1c2VybmFtZTogdXNlci51c2VybmFtZSxcbiAgICBfaWQ6IHVzZXIuX2lkLFxuICB9O1xuICByZXR1cm4gand0LnNpZ24ocGF5bG9hZCwgU0VDUkVUX0tFWSwge1xuICAgIGV4cGlyZXNJbjogRVhQSVJBVElPTl9EQVRFLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCB2ZXJpZnlUb2tlbiA9IHRva2VuID0+XG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBqd3QudmVyaWZ5KHRva2VuLCBTRUNSRVRfS0VZLCAoZXJyLCBwYXlsb2FkKSA9PiB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICByZXNvbHZlKHBheWxvYWQpO1xuICAgIH0pO1xuICB9KTtcblxuLy8gbWlkZGxld2FyZVxuZXhwb3J0IGNvbnN0IGF1dGhlbnRpY2F0ZVVzZXIgPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgaWYgKCFyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ3Rva2VuIG11c3QgYmUgaW5jbHVkZWQnIH0pO1xuICB9XG5cbiAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICBsZXQgcGF5bG9hZDtcbiAgdHJ5IHtcbiAgICBwYXlsb2FkID0gYXdhaXQgdmVyaWZ5VG9rZW4odG9rZW4pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ3Rva2VuIGlzIGludmFsaWQnIH0pO1xuICB9XG5cbiAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJNb2RlbC5maW5kQnlJZChwYXlsb2FkLl9pZClcbiAgICAuc2VsZWN0KCctcGFzc3dvcmQnKVxuICAgIC5sZWFuKClcbiAgICAuZXhlYygpO1xuXG4gIGlmICghdXNlcikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IG1lc3NhZ2U6ICd1c2VyIGlzIG5vdCBmb3VuZCcgfSk7XG4gIH1cblxuICByZXEudXNlciA9IHVzZXI7XG4gIG5leHQoKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUErQyxTQUFBRCx1QkFBQUksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUovQzs7QUFHQTs7QUFHTyxNQUFNRyxRQUFRLEdBQUdDLElBQUksSUFBSTtFQUM5QixNQUFNQyxPQUFPLEdBQUc7SUFDZEMsUUFBUSxFQUFFRixJQUFJLENBQUNFLFFBQVE7SUFDdkJDLEdBQUcsRUFBRUgsSUFBSSxDQUFDRztFQUNaLENBQUM7RUFDRCxPQUFPQyxxQkFBRyxDQUFDQyxJQUFJLENBQUNKLE9BQU8sRUFBRUssa0JBQVUsRUFBRTtJQUNuQ0MsU0FBUyxFQUFFQztFQUNiLENBQUMsQ0FBQztBQUNKLENBQUM7QUFBQ0MsT0FBQSxDQUFBVixRQUFBLEdBQUFBLFFBQUE7QUFFSyxNQUFNVyxXQUFXLEdBQUdDLEtBQUssSUFDOUIsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0VBQy9CVixxQkFBRyxDQUFDVyxNQUFNLENBQUNKLEtBQUssRUFBRUwsa0JBQVUsRUFBRSxDQUFDVSxHQUFHLEVBQUVmLE9BQU8sS0FBSztJQUM5QyxJQUFJZSxHQUFHLEVBQUUsT0FBT0YsTUFBTSxDQUFDRSxHQUFHLENBQUM7SUFDM0JILE9BQU8sQ0FBQ1osT0FBTyxDQUFDO0VBQ2xCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFSjtBQUFBUSxPQUFBLENBQUFDLFdBQUEsR0FBQUEsV0FBQTtBQUNPLE1BQU1PLGdCQUFnQixHQUFHLE1BQUFBLENBQU9DLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEtBQUs7RUFDeEQsSUFBSSxDQUFDRixHQUFHLENBQUNHLE9BQU8sQ0FBQ0MsYUFBYSxFQUFFO0lBQzlCLE9BQU9ILEdBQUcsQ0FBQ0ksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBTyxFQUFFO0lBQXlCLENBQUMsQ0FBQztFQUNwRTtFQUVBLE1BQU1kLEtBQUssR0FBR08sR0FBRyxDQUFDRyxPQUFPLENBQUNDLGFBQWE7RUFDdkMsSUFBSXJCLE9BQU87RUFDWCxJQUFJO0lBQ0ZBLE9BQU8sR0FBRyxNQUFNUyxXQUFXLENBQUNDLEtBQUssQ0FBQztFQUNwQyxDQUFDLENBQUMsT0FBT2YsQ0FBQyxFQUFFO0lBQ1YsT0FBT3VCLEdBQUcsQ0FBQ0ksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBTyxFQUFFO0lBQW1CLENBQUMsQ0FBQztFQUM5RDtFQUVBLE1BQU16QixJQUFJLEdBQUcsTUFBTTBCLGtCQUFTLENBQUNDLFFBQVEsQ0FBQzFCLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLENBQy9DeUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUNuQkMsSUFBSSxDQUFDLENBQUMsQ0FDTkMsSUFBSSxDQUFDLENBQUM7RUFFVCxJQUFJLENBQUM5QixJQUFJLEVBQUU7SUFDVCxPQUFPbUIsR0FBRyxDQUFDSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQztNQUFFQyxPQUFPLEVBQUU7SUFBb0IsQ0FBQyxDQUFDO0VBQy9EO0VBRUFQLEdBQUcsQ0FBQ2xCLElBQUksR0FBR0EsSUFBSTtFQUNmb0IsSUFBSSxDQUFDLENBQUM7QUFDUixDQUFDO0FBQUNYLE9BQUEsQ0FBQVEsZ0JBQUEsR0FBQUEsZ0JBQUEiLCJpZ25vcmVMaXN0IjpbXX0=